Finally, of our adjectives used to describe, we said that Agda is
*dependently-typed.* Dependent type-systems are a formalization that allows
types to *depend* on values (hence the name.) What does this mean? In practice,
it means we are allowed to compute types in the exact same way we compute
values. That is to say, we can write a `crazy` function:

```agda
crazy : (b : Bool) → if b then ℕ else String
crazy false = "hello"
crazy true  = 17
```

where the *return type* of `crazy` depends on the *value* of its input. If we
pass in `true`, we get a number out, but if we pass in `false` we get out a
string. Notice also that we used the `if_then_else_` function that we just
defined in order to compute the type of `crazy`. Crazy, isn't it?

The flexibility afforded by dependent types is what many practitioners of
dynamically typed languages are chasing; they acknowledge a function should do
different things in different cases, but have been unable to encode that
reasoning in the typed languages they've seen. Rather than throwing out the type
systems that are unable to serve them, they throw out the entire idea of types
instead!

But types serve a valuable purpose; they allow us to document and enforce sanity
checks and invariants on our programs. Types might feel like a nuisance to
write in the moment, but their usefulness becomes immediately evident the first
time you've had the joy of performing a large refactoring a typed codebase. You
make the one change you had in mind, and then fix up the resulting type errors
until they are no more. The result is a working, easily-refactored program.

In addition to the benefits afforded by having a strong type system, a
dependently-typed system additionally allows us to blur the distinction between
types and values. We can compute types, and use terms as parameters in our
types, and stick types in our data containers. Dependent types de-stratify a
language --- there is no distinction between the value-level and the type-level.
Anything you want to do is straightforward, and you can use all the techniques
you already know of to implement it.

